// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

generator zod {
  provider                   = "zod-prisma-types"
  createRelationValuesTypes  = true
}

model Post {
    id             String        @id @default(cuid())
    profileId      String
    profile        Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
    inReplyToId    String?
    inReplyTo      Post?         @relation(name: "ReplyPost", fields: [inReplyToId], references: [id])
    replies        Post[]        @relation(name: "ReplyPost")
    reblogId       String?
    reblog         Post?         @relation(name: "ReblogPost", fields: [reblogId], references: [id])
    reblogs        Post[]        @relation(name: "ReblogPost")
    attachments    Attachment[]
    content        String?
    repliesCount   Int           @default(0)
    reblogsCount   Int           @default(0)
    favoritesCount Int           @default(0)
    favorites      Favorite[]
    notifications  Notification[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@unique([id, profileId])
}

model Attachment {
    id        String    @id @default(cuid())
    postId    String
    post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    fileId    String
    file      File      @relation(fields: [fileId], references: [id])
    createdAt DateTime  @default(now())
}

model File {
    id          String        @id @default(cuid())
    attachments Attachment[]
    headers     Profile[]     @relation(name: "HeaderFile")
    avatars     Profile[]     @relation(name: "AvatarFile")
    type        String
    url         String
    mime        String
    name        String
    extension   String
    size        Int
    height      Int?
    width       Int?
    createdAt   DateTime  @default(now())
}

model Favorite {
    id          String   @id @default(cuid())
    postId      String
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    profileId   String
    profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

    @@unique([postId, profileId])
}

model Follow {
    id          String   @id @default(cuid())
    followedId  String
    followed    Profile  @relation(name: "FollowedProfile", fields: [followedId], references: [id], onDelete: Cascade)
    followerId  String
    follower    Profile  @relation(name: "FollowerProfile", fields: [followerId], references: [id], onDelete: Cascade)

    @@unique([followedId, followerId])
}

model Notification {
    id          String    @id @default(cuid())
    postId      String
    post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    notifiedId  String
    notified    Profile   @relation(name: "NotifiedNotification", fields: [notifiedId], references: [id], onDelete: Cascade)
    notifierId  String
    notifier    Profile   @relation(name: "NotifierNotification", fields: [notifierId], references: [id], onDelete: Cascade)
    type        String
    read        Boolean   @default(false)
    createdAt   DateTime  @default(now())
}

model Profile {
    id                String          @id @default(cuid())
    posts             Post[]
    notified          Notification[]  @relation(name: "NotifiedNotification")
    notifier          Notification[]  @relation(name: "NotifierNotification")
    userId            String?
    user              User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    headerId          String?
    header            File?           @relation(name: "HeaderFile", fields: [headerId], references: [id], onDelete: Cascade)
    avatarId          String?
    avatar            File?           @relation(name: "AvatarFile", fields: [avatarId], references: [id], onDelete: Cascade)
    name              String
    domain            String
    username          String          @unique
    summary           String?
    followingCount    Int             @default(0)
    followersCount    Int             @default(0)
    following         Follow[]        @relation(name: "FollowerProfile")
    followers         Follow[]        @relation(name: "FollowedProfile")
    favorites         Favorite[]
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
    profiles      Profile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
